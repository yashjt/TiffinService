<%- include('partials/header') %>

    <div class="container mt-5">
        <h2>Order Food</h2>

        <form id="orderForm">
            <div class="row">
                <div class="col-md-6">
                    <h3>Menu</h3>

                    <!-- Filter buttons for categories -->
                    <div class="mb-3">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary active"
                                data-category="all">All</button>
                            <button type="button" class="btn btn-outline-primary"
                                data-category="appetizer">Appetizers</button>
                            <button type="button" class="btn btn-outline-primary" data-category="main">Main
                                Course</button>
                            <button type="button" class="btn btn-outline-primary"
                                data-category="dessert">Desserts</button>
                            <button type="button" class="btn btn-outline-primary"
                                data-category="beverage">Beverages</button>
                        </div>
                    </div>

                    <% menu.forEach(item=> { %>
                        <div class="card mb-3 menu-item" data-category="<%= item.category || 'main' %>">
                            <div class="card-body d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="card-title">
                                        <%= item.name %>
                                            <% if(item.name.toLowerCase().includes('premium')) { %>
                                                <span class="badge bg-warning text-dark">Premium</span>
                                                <% } %>

                                                    <% if (item.name.toLowerCase().includes('wine') ||
                                                        item.name.toLowerCase().includes('beer') ||
                                                        item.name.toLowerCase().includes('cocktail') ||
                                                        item.name.toLowerCase().includes('alcohol')) { %>
                                                        <span class="badge bg-danger text-white">Alcohol</span>
                                                        <% } %>
                                    </h5>
                                    <p class="card-text">
                                        $<%= item.price.toFixed(2) %>
                                            <% if(item.category) { %>
                                                <span class="badge 
                                                <%= item.category === 'appetizer' ? 'bg-info' : 
                                                   item.category === 'main' ? 'bg-success' : 
                                                   item.category === 'dessert' ? 'bg-danger' : 
                                                   item.category === 'beverage' ? 'bg-primary' : 'bg-secondary' %>">
                                                    <%= item.category.charAt(0).toUpperCase() + item.category.slice(1)
                                                        %>
                                                </span>
                                                <% } %>

                                                    <span class="ms-2 tax-info" data-is-alcoholic="<%= item.name.toLowerCase().includes('wine') || 
                                                                   item.name.toLowerCase().includes('beer') || 
                                                                   item.name.toLowerCase().includes('cocktail') || 
                                                                   item.name.toLowerCase().includes('alcohol') %>">
                                                        <small class="text-muted">+Tax: $<span class="item-tax-amount">
                                                                <%= (item.name.toLowerCase().includes('wine') ||
                                                                    item.name.toLowerCase().includes('beer') ||
                                                                    item.name.toLowerCase().includes('cocktail') ||
                                                                    item.name.toLowerCase().includes('alcohol')) ?
                                                                    (item.price * 0.1125).toFixed(2) : (item.price *
                                                                    0.0875).toFixed(2) %>
                                                            </span></small>
                                                    </span>
                                    </p>
                                </div>
                                <div>
                                    <input type="number" min="0" max="10" value="0"
                                        class="form-control w-25 item-quantity" data-id="<%= item.id || item._id %>"
                                        data-name="<%= item.name %>" data-price="<%= item.price %>" data-is-alcoholic="<%= item.name.toLowerCase().includes('wine') || 
                                                            item.name.toLowerCase().includes('beer') || 
                                                            item.name.toLowerCase().includes('cocktail') || 
                                                            item.name.toLowerCase().includes('alcohol') %>">
                                </div>
                            </div>
                        </div>
                        <% }); %>
                </div>
                <div class="col-md-6">
                    <h3>Order Details</h3>
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Delivery Address</label>
                                <textarea class="form-control" id="deliveryAddress" rows="3" required
                                    placeholder="Please enter your complete address (minimum 10 characters)"></textarea>
                                <div id="addressHelp" class="form-text">Please provide a detailed address for delivery.
                                </div>
                            </div>

                            <!-- Order summary section -->
                            <div class="mb-3">
                                <h5>Order Summary</h5>
                                <div id="orderSummaryItems" class="mb-2">
                                    <p class="text-muted">No items added yet</p>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between">
                                    <span>Subtotal:</span>
                                    <span>$<span id="subtotalPrice">0.00</span></span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span>Tax:</span>
                                    <span>$<span id="taxAmount">0.00</span></span>
                                </div>
                                <div class="d-flex justify-content-between mt-2">
                                    <strong>Total Price:</strong>
                                    <strong>$<span id="totalPrice">0.00</span></strong>
                                </div>
                                <div id="minOrderWarning" class="text-danger mt-2 d-none">
                                    <small>Minimum order value is $5.00</small>
                                </div>
                            </div>

                            <!-- Validation errors area -->
                            <div id="validationErrors" class="alert alert-danger d-none mb-3">
                                <ul class="mb-0" id="errorList"></ul>
                            </div>

                            <button type="submit" class="btn btn-primary" id="placeOrderBtn" disabled>Place
                                Order</button>
                            <div id="orderProcessing" class="mt-3 d-none">
                                <div class="spinner-border text-primary spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span class="ms-2">Processing your order...</span>
                            </div>
                        </div>
                    </div>

                    <!-- Order Success (will be shown after order is created) -->
                    <div id="orderSummary" class="card mt-4 d-none">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Order Created Successfully!</h5>
                        </div>
                        <div class="card-body">
                            <p>Your order has been created. Please proceed to checkout to complete your payment.</p>
                            <p><strong>Order ID:</strong> <span id="summaryOrderId"></span></p>
                            <p><strong>Subtotal:</strong> $<span id="summarySubtotal"></span></p>
                            <p><strong>Tax:</strong> $<span id="summaryTax"></span></p>
                            <p><strong>Total:</strong> $<span id="summaryTotal"></span></p>
                            <a id="checkoutLink" href="#" class="btn btn-primary">Proceed to Checkout</a>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityInputs = document.querySelectorAll('.item-quantity');
            const totalPriceSpan = document.getElementById('totalPrice');
            const subtotalPriceSpan = document.getElementById('subtotalPrice');
            const taxAmountSpan = document.getElementById('taxAmount');
            const orderForm = document.getElementById('orderForm');
            const orderProcessing = document.getElementById('orderProcessing');
            const orderSummary = document.getElementById('orderSummary');
            const summaryOrderId = document.getElementById('summaryOrderId');
            const summarySubtotal = document.getElementById('summarySubtotal');
            const summaryTax = document.getElementById('summaryTax');
            const summaryTotal = document.getElementById('summaryTotal');
            const checkoutLink = document.getElementById('checkoutLink');
            const orderSummaryItems = document.getElementById('orderSummaryItems');
            const validationErrors = document.getElementById('validationErrors');
            const errorList = document.getElementById('errorList');
            const deliveryAddress = document.getElementById('deliveryAddress');
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const minOrderWarning = document.getElementById('minOrderWarning');
            const categoryButtons = document.querySelectorAll('[data-category]');
            const menuItems = document.querySelectorAll('.menu-item');

            // Tax calculation function
            function calculateTax(item) {
                const price = parseFloat(item.price);
                const isAlcoholic = item.isAlcoholic === true || item.isAlcoholic === "true";
                const taxRate = isAlcoholic ? 0.1125 : 0.0875;

                return parseFloat((price * taxRate).toFixed(2));
            }

            // Rule engine validation client-side
            function validateOrder(orderData) {
                const errors = [];

                // Rule: Order should have at least one item
                if (!orderData.items || orderData.items.length === 0) {
                    errors.push("Order must contain at least one item");
                }

                // Rule: Delivery address must be at least 10 characters
                if (!orderData.deliveryAddress || orderData.deliveryAddress.length < 10) {
                    errors.push("Delivery address must be at least 10 characters long");
                }

                // Rule: Individual item quantity validation
                if (orderData.items && orderData.items.some(item => item.quantity > 10)) {
                    errors.push("Maximum quantity per item is 10");
                }

                // Rule: Premium item pricing validation
                const invalidPremiumItems = orderData.items ? orderData.items.filter(item =>
                    item.name.toLowerCase().includes('premium') && item.price < 15
                ) : [];

                if (invalidPremiumItems.length > 0) {
                    errors.push("Premium items must be priced at least $15");
                }

                // Rule: Minimum order value
                if (orderData.subtotal < 5) {
                    errors.push("Minimum order value is $5 (before tax)");
                }

                // Rule: Alcoholic beverage minimum price
                const invalidAlcoholicItems = orderData.items ? orderData.items.filter(item =>
                    (item.name.toLowerCase().includes('wine') ||
                        item.name.toLowerCase().includes('beer') ||
                        item.name.toLowerCase().includes('cocktail') ||
                        item.name.toLowerCase().includes('alcohol')) &&
                    item.price < 8
                ) : [];

                if (invalidAlcoholicItems.length > 0) {
                    errors.push("Alcoholic beverages must be priced at least $8");
                }

                // No tax exempt validation needed

                return {
                    valid: errors.length === 0,
                    errors: errors
                };
            }

            function updateOrderButton() {
                const { subtotal, taxAmount, totalPrice, orderItems } = getOrderDetails();

                // Validate order
                const orderData = {
                    items: orderItems,
                    subtotal: subtotal,
                    taxAmount: taxAmount,
                    totalPrice: totalPrice,
                    deliveryAddress: deliveryAddress.value.trim()
                };

                const validation = validateOrder(orderData);

                // Clear previous errors
                errorList.innerHTML = '';
                validationErrors.classList.add('d-none');

                // Show minimum order warning if needed
                if (subtotal < 5) {
                    minOrderWarning.classList.remove('d-none');
                } else {
                    minOrderWarning.classList.add('d-none');
                }

                // Enable/disable button based on validation
                if (validation.valid) {
                    placeOrderBtn.disabled = false;
                } else {
                    placeOrderBtn.disabled = true;

                    // Only show validation errors if the user has interacted with the form
                    if (orderItems.length > 0 || deliveryAddress.value.length > 0) {
                        validationErrors.classList.remove('d-none');
                        validation.errors.forEach(error => {
                            const li = document.createElement('li');
                            li.textContent = error;
                            errorList.appendChild(li);
                        });
                    }
                }
            }

            function getOrderDetails() {
                let subtotal = 0;
                let taxAmount = 0;
                const orderItems = [];

                quantityInputs.forEach(input => {
                    const quantity = parseInt(input.value) || 0;
                    if (quantity <= 0) return;

                    const id = input.dataset.id;
                    const price = parseFloat(input.dataset.price);
                    const name = input.dataset.name;
                    const isAlcoholic = input.dataset.isAlcoholic === "true";

                    const item = {
                        id: id,
                        name: name,
                        quantity: quantity,
                        price: price,
                        isAlcoholic: isAlcoholic
                    };

                    // Calculate tax
                    const itemTax = calculateTax(item);
                    const itemSubtotal = quantity * price;
                    const itemTaxTotal = quantity * itemTax;

                    subtotal += itemSubtotal;
                    taxAmount += itemTaxTotal;

                    orderItems.push({
                        ...item,
                        itemTax: itemTax,
                        subtotal: itemSubtotal,
                        taxTotal: itemTaxTotal
                    });
                });

                const totalPrice = subtotal + taxAmount;

                // Update display
                subtotalPriceSpan.textContent = subtotal.toFixed(2);
                taxAmountSpan.textContent = taxAmount.toFixed(2);
                totalPriceSpan.textContent = totalPrice.toFixed(2);

                return { subtotal, taxAmount, totalPrice, orderItems };
            }

            function updateOrderSummary() {
                const { orderItems } = getOrderDetails();

                // Update order summary
                orderSummaryItems.innerHTML = '';

                if (orderItems.length === 0) {
                    orderSummaryItems.innerHTML = '<p class="text-muted">No items added yet</p>';
                } else {
                    const ul = document.createElement('ul');
                    ul.className = 'list-unstyled';

                    orderItems.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'd-flex justify-content-between mb-1';

                        const itemDetails = document.createElement('div');
                        itemDetails.innerHTML = `
                            <span>${item.quantity}x ${item.name}</span>
                        `;

                        const pricing = document.createElement('div');
                        pricing.className = 'text-end';
                        pricing.innerHTML = `
                            <div>$${item.subtotal.toFixed(2)}</div>
                            <small class="text-muted">+Tax: $${item.taxTotal.toFixed(2)}</small>
                        `;

                        li.appendChild(itemDetails);
                        li.appendChild(pricing);
                        ul.appendChild(li);
                    });

                    orderSummaryItems.appendChild(ul);
                }

                updateOrderButton();
            }

            // Filter menu items by category
            categoryButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // Update active button
                    categoryButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');

                    const category = this.dataset.category;

                    // Show/hide menu items
                    menuItems.forEach(item => {
                        if (category === 'all' || item.dataset.category === category) {
                            item.style.display = 'block';
                        } else {
                            item.style.display = 'none';
                        }
                    });
                });
            });

            quantityInputs.forEach(input => {
                input.addEventListener('input', function () {
                    // Enforce quantity limits
                    if (parseInt(this.value) > 10) {
                        this.value = 10;
                    }

                    updateOrderSummary();
                });
            });

            // No tax exempt checks to handle

            deliveryAddress.addEventListener('input', updateOrderButton);

            orderForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const { subtotal, taxAmount, totalPrice, orderItems } = getOrderDetails();

                // Final validation check
                const orderData = {
                    items: orderItems,
                    subtotal: subtotal,
                    taxAmount: taxAmount,
                    totalPrice: totalPrice,
                    deliveryAddress: deliveryAddress.value.trim()
                };

                const validation = validateOrder(orderData);

                if (!validation.valid) {
                    // Display validation errors
                    validationErrors.classList.remove('d-none');
                    errorList.innerHTML = '';
                    validation.errors.forEach(error => {
                        const li = document.createElement('li');
                        li.textContent = error;
                        errorList.appendChild(li);
                    });
                    return;
                }

                // Show processing indicator
                placeOrderBtn.disabled = true;
                orderProcessing.classList.remove('d-none');

                try {
                    const response = await fetch('/create-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            items: orderItems.map(item => ({
                                id: item.id,
                                name: item.name,
                                quantity: item.quantity,
                                price: item.price,
                                isAlcoholic: item.isAlcoholic,
                                itemTax: item.itemTax
                            })),
                            subtotal: subtotal,
                            taxAmount: taxAmount,
                            totalPrice: totalPrice,
                            deliveryAddress: deliveryAddress.value.trim()
                        })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        // Hide the processing indicator
                        orderProcessing.classList.add('d-none');

                        // Show order summary
                        summaryOrderId.textContent = result.orderId;
                        summarySubtotal.textContent = subtotal.toFixed(2);
                        summaryTax.textContent = taxAmount.toFixed(2);
                        summaryTotal.textContent = totalPrice.toFixed(2);
                        checkoutLink.href = `/checkout/${result.orderId}`;
                        orderSummary.classList.remove('d-none');

                        // Scroll to the order summary
                        orderSummary.scrollIntoView({ behavior: 'smooth' });
                    } else {
                        // Re-enable the submit button and hide processing
                        placeOrderBtn.disabled = false;
                        orderProcessing.classList.add('d-none');

                        // Display server-side validation errors if any
                        if (result.validationErrors) {
                            validationErrors.classList.remove('d-none');
                            errorList.innerHTML = '';
                            result.validationErrors.forEach(error => {
                                const li = document.createElement('li');
                                li.textContent = error.message;
                                errorList.appendChild(li);
                            });
                        } else {
                            alert(result.error || 'Failed to place order');
                        }
                    }
                } catch (error) {
                    console.error('Order submission error:', error);
                    // Re-enable the submit button and hide processing
                    placeOrderBtn.disabled = false;
                    orderProcessing.classList.add('d-none');
                    alert('An error occurred while placing the order');
                }
            });

            // Initial updates
            updateOrderSummary();
        });
    </script>

    <%- include('partials/footer') %>